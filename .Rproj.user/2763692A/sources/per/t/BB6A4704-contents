#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(tidyverse)
library(readxl)
library(ggplot2)
library("formattable")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {

  data <- reactive({
    req(input$upload)
    
    ext <- tools::file_ext(input$upload$name)
    switch(ext,
           csv = vroom::vroom(input$upload$datapath, delim = ","),
           tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
           validate("Invalid file; Please upload a .csv or .tsv file")
    )
  })
  cleanData <- reactive({
    cleanData <- na.omit(data())
    cleanData
  })
  dataxeploai <- reactive({
    cleanData1 <- cleanData()
    data_xeploai <- Arrange(cleanData1)
    data_xeploai
  })
  dataxettn <- reactive({
    dataxettn1 <- dataxeploai()
    dataxettn1$Result <- ifelse(dataxettn1$Means>=4,"Tot nghiep","Rot")
    dataxettn1
  })

  observeEvent(input$upload,{
    output$table <- renderDataTable(data(), options = list(pageLength = 10))
  })

  observeEvent(input$btnClean, {
    if(req(input$btnClean)){
      output$table <- renderDataTable(cleanData(), options = list(pageLength = 10))
    }
  })
  # xep loai hoc tap dua theo diem trung binh
  observeEvent(input$btnXeploai, {
    if(req(input$btnXeploai)){
      output$table <- renderDataTable(dataxeploai(), options = list(pageLength = 10))
    }
})
  # xet tot nghiep dua theo diem trung binh
  observeEvent(input$btnXettn, {
    if(req(input$btnXettn)){
      output$table <- renderDataTable(dataxettn(), options = list(pageLength = 8))
    }
    
  })
  observeEvent(input$typequery, {
    if(input$typequery == "mon co diem cao nhat"){
      data_new4 <- dataxettn()
      data_new4$Max_point<-apply(data_new4[,5:10],1,max)
      data_new4$Name_max_point<-colnames(data_new4[,5:10])[apply(data_new4[,5:10],1,which.max)]
      
      output$table <- renderDataTable(data_new4, options = list(pageLength = 8))
    }else if(input$typequery == "mon co diem thap nhat"){
      data_new5 <- dataxettn()
      data_new5$Min_point<-apply(data_new5[,5:10],1,min)
      data_new5$Name_min_point<-colnames(data_new5[,5:10])[apply(data_new5[,5:10],1,which.min)]
      output$table <- renderDataTable(data_new5, options = list(pageLength = 8))
    }
    
  })
  
  # xuat bieu do tròn
  observeEvent(input$typechars, {
    if(req(input$typechars == "Pie Chart")){
      output$Bieudo <- renderPlot({
        data_new5 <- dataxettn()
        newTable <- table(data_new5$classification)
        ## phần trăm 
        totalPercent <- table(data_new5$classification) / nrow(data_new5)
        percentResult <- percent(totalPercent)
        percentResult
        ResultTable <- data.frame(
          "brand" = newTable,
          "percentt" = percentResult
        )
        ResultTable = subset(ResultTable, select = -c(3))
        brand <- ResultTable$brand.Var1
        percentt <- ResultTable$percentt.Freq
        
        ggplot(ResultTable, aes(x="", y=percentt, fill=brand)) +
          geom_bar(stat="identity", color = "white") +
          coord_polar("y", start=0) +
          geom_text(aes(label = paste0(percentt, "")), position = position_stack(vjust=0.5)) +
          labs(x = NULL, y = NULL) +
          theme_classic() +
          theme(axis.line = element_blank(),
                axis.text = element_blank(),
                axis.ticks = element_blank()) +
          scale_fill_brewer(palette="Greens", name = "danh hieu") + ggtitle("Phan bo loai danh hieu") + theme(plot.title = element_text(hjust = 0.5, size = 20),axis.title = element_blank(),
                                                                                                              axis.text = element_blank(),
                                                                                                              axis.ticks = element_blank(),
                                                                                                              panel.grid=element_blank(),
                                                                                                              panel.border = element_blank()) 
        
      })
      
    }
  })
  
   #xuat bieu do cot
  observeEvent(input$typechars, {
    if(req(input$typechars == "Bar plot")){
      output$Bieudo <- renderPlot({
        data_new5 <- dataxettn()
        # tinh diem trung binh các môn dựa trên điểm cua tat cac cac mon thi ve bieu do diem thi trung binh cua tat ca các môn học
        subjectsMean <- c(mean(data_new5$maths), mean(data_new5$Literature), mean(data_new5$Physics), mean(data_new5$Chemistry), mean(data_new5$Biology), mean(data_new5$Eng))
        # or
        subjectsMean <- apply(data_new5[,5:10],2,mean) 
        
        df <- data.frame(sname = colnames(data_new5[,5:10]),
                         smean = subjectsMean)
        library(ggplot2)
        
        ggplot(df, aes(x = sname, y = smean, fill = sname)) +
          geom_col() + geom_text(aes(label = signif(smean, digits = 3)), vjust = -1, colour = "black") + guides(fill = guide_legend(title = "Môn học"))
        
        
        
      })
      
    }
  })
  
  observeEvent(input$typechars, {
    if(req(input$typechars == "Histogram")){
      data_new5 <- dataxettn()
      output$Bieudo <- renderPlot({
        hist.plotter <- function(xx, xlabel, title){
          p <- ggplot(data_new5, aes(x = xx)) + 
            geom_histogram(colour = 4, fill = "white", binwidth = 0.15) + ggtitle(title)+theme(plot.title = element_text(hjust = 0.5)) + xlab(xlabel) + ylab("So luong") + 
            theme(axis.text=element_text(size=20),
                  
                  axis.title=element_text(size=20),
                  
                  plot.title = element_text(size=20))
          p
        }
        p1 <- hist.plotter(data_new5$maths, "Maths", "Maths Histogram")
        p2 <- hist.plotter(data_new5$Literature, "Literature", "Literature Histogram")
        p3 <- hist.plotter(data_new5$Physics, "Physics", "Physics Histogram")
        p4 <- hist.plotter(data_new5$Chemistry, "Chemistry", "Chemistry Histogram")
        p5 <- hist.plotter(data_new5$Biology, "Biology", "Biology Histogram")
        p6 <- hist.plotter(data_new5$Eng, "English", "English Histogram")
        
        
        library(gridExtra)
        p <- grid.arrange(p1, p2, p3, p4, p5, p6, nrow = 2, ncol = 3)
        
        
      })
      
    }
  })
  
})

Arrange <- function(data_new1){
  
  data_new1$Means <- apply(data_new1[,5:10],1,mean)
  data_new1$Means[2] <- 7.000001
  
  data_new1$classification <- 0
  for (i in 1:nrow(data_new1)) {
    
    if(data_new1$Means[i] >= 7) {
      data_new1$classification[i] <- "Giỏi"
    } else if(data_new1$Means[i] >= 5) {
      data_new1$classification[i] <- "Khá"
    } else {
      data_new1$classification[i] <- "́Trung bình"
    }
    
  }
  return(data_new1)
  
}
